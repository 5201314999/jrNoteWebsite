(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{166:function(a,t,e){"use strict";e.r(t);var r=e(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"chrome-垃圾回收机制和内存泄漏原因分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chrome-垃圾回收机制和内存泄漏原因分析","aria-hidden":"true"}},[a._v("#")]),a._v(" chrome 垃圾回收机制和内存泄漏原因分析")]),a._v(" "),e("h3",{attrs:{id:"垃圾回收机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制","aria-hidden":"true"}},[a._v("#")]),a._v(" 垃圾回收机制")]),a._v(" "),e("h4",{attrs:{id:"垃圾回收种类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收种类","aria-hidden":"true"}},[a._v("#")]),a._v(" 垃圾回收种类")]),a._v(" "),e("p",[a._v("通常情况下，垃圾数据回收分为手动回收和自动回收两种策略。")]),a._v(" "),e("ul",[e("li",[a._v("手动回收策略，何时分配内存、何时销毁内存都是由代码控制的")]),a._v(" "),e("li",[a._v("自动回收策略，产生的垃圾数据是由垃圾回收器来释放的，并不需要手动通过代码来释放。")])]),a._v(" "),e("h4",{attrs:{id:"垃圾回收器的大致流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的大致流程","aria-hidden":"true"}},[a._v("#")]),a._v(" 垃圾回收器的大致流程")]),a._v(" "),e("ol",[e("li",[a._v("第一步是标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进\n行垃圾回收的对象。")]),a._v(" "),e("li",[a._v("第二步是回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。")]),a._v(" "),e("li",[a._v("第三步是做内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为内存碎片，。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片。(这步其实是可选的，因为有的垃圾回收器不会产生内存碎片).")])]),a._v(" "),e("h4",{attrs:{id:"栈回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈回收","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈回收")]),a._v(" "),e("p",[a._v("JavaScript 引擎会通过向下移动 ESP(记录当前执行状态的指针) 来销毁该函数保存在栈中的执行上下文。")]),a._v(" "),e("h4",{attrs:{id:"堆回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆回收","aria-hidden":"true"}},[a._v("#")]),a._v(" 堆回收")]),a._v(" "),e("p",[a._v("在 V8 中会把堆分为新生代和老生代两个区域，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。")]),a._v(" "),e("p",[a._v("针对2种空间，采用2种垃圾回收器")]),a._v(" "),e("ul",[e("li",[a._v("副垃圾回收器，主要负责新生代的垃圾回收。")]),a._v(" "),e("li",[a._v("主垃圾回收器，主要负责老生代的垃圾回收。")])]),a._v(" "),e("ol",[e("li",[a._v("新生代回收算法：")])]),a._v(" "),e("p",[a._v("新生代中用"),e("code",[a._v("Scavenge 算法")]),a._v("来处理，把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域。新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。")]),a._v(" "),e("p",[a._v("在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。")]),a._v(" "),e("p",[e("code",[a._v("完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域")]),a._v("。这样就完成了垃圾对象的回收操作，同时这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去.\n为了执行效率，一般新生区的空间会被设置得比较小,也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象"),e("code",[a._v("晋升策略")]),a._v(","),e("code",[a._v("也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。")])]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("老生代回收算法:\n老生代中用"),e("code",[a._v("标记 - 清除（Mark-Sweep）")]),a._v("的算法来处理。首先是标记过程阶段，标记阶段就是从一组根元素开始，递归遍历这组根元素(遍历调用栈)，在这个遍历过程中，能到达的元素称为活动对象,没有到达的元素就可以判断为垃圾数据.然后在遍历过程中标记，标记完成后就进行清除过程。它和副垃圾回收器的垃圾清除过程完全不同，这个的清除过程是删除标记数据。")])]),a._v(" "),e("p",[a._v("清除算法后，会产生大量不连续的内存碎片。而碎片过多会导致大对象无法分配到足够的连续内存，于是又产生了"),e("code",[a._v("标记 - 整理（Mark-Compact）")]),a._v("算法，这个标记过程仍然与标记 - 清除算法里的是一样的，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存，从而让存活对象占用连续的内存块。")]),a._v(" "),e("h4",{attrs:{id:"全停顿"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全停顿","aria-hidden":"true"}},[a._v("#")]),a._v(" 全停顿")]),a._v(" "),e("p",[a._v("由于 JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做全停顿。")]),a._v(" "),e("p",[a._v("在 V8 新生代的垃圾回收中，因其空间较小，且存活对象较少，所以全停顿的影响不大，但老生代就不一样了。如果执行垃圾回收的过程中，占用主线程时间过久，主线程是不能做其他事情的。比如页面正在执行一个 JavaScript 动画，因为垃圾回收器在工作，就会导致这个动画在垃圾回收过程中无法执行，这将会造成页面的卡顿现象。")]),a._v(" "),e("p",[e("code",[a._v("为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，")]),a._v("我们把这个算法称为"),e("code",[a._v("增量标记（Incremental Marking）")]),a._v("算法.")]),a._v(" "),e("p",[a._v("使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。")]),a._v(" "),e("h3",{attrs:{id:"内存泄漏原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏原因","aria-hidden":"true"}},[a._v("#")]),a._v(" 内存泄漏原因")]),a._v(" "),e("h4",{attrs:{id:"内存泄漏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏","aria-hidden":"true"}},[a._v("#")]),a._v(" 内存泄漏")]),a._v(" "),e("p",[a._v("不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。")]),a._v(" "),e("h4",{attrs:{id:"内存泄漏的常见原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏的常见原因","aria-hidden":"true"}},[a._v("#")]),a._v(" 内存泄漏的常见原因")]),a._v(" "),e("ol",[e("li",[a._v("计时器引用没有清除\n会导致内部引用的变量也没删除,回调函数也没删除"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var someData = getData();\n  setInterval(function() {    var node = document.getElementById('Node');    if(node) {\n          node.innerHTML = JSON.stringify(someData));\n      }\n  }, 1000);\n")])])])]),a._v(" "),e("li",[a._v("事件没有及时销毁，重复创建\n以前在项目中遇到 socket 以及 绘图项目中 多个工具切换没有销毁事件，反复创建事件 导致代码运行效果异常。")]),a._v(" "),e("li",[a._v("全局变量过多过大（其实项目中这个基本没遇到）")]),a._v(" "),e("li",[a._v("闭包导致的内存泄漏")])]),a._v(" "),e("h4",{attrs:{id:"用来查看内存泄露的几种方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用来查看内存泄露的几种方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 用来查看内存泄露的几种方法")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("使用 Chrome 任务管理器实时监视内存使用 打开 chrome 浏览器")])]),a._v(" "),e("li",[e("p",[a._v("利用chrome 时间轴记录可视化内存泄漏\nPerformance(时间轴)能够面板直观实时显示JS内存使用情况、节点数量、监听器数量等。")])]),a._v(" "),e("li",[e("p",[a._v("使用堆快照发现已分离 DOM 树的内存泄漏\n同理，调出调试面板，点击Memory，然后选择Heap Snapshot，然后点击进行录制。录制完成后，选中录制结果，在 Class filter 文本框中键入 Detached，搜索已分离的 DOM 树。")])]),a._v(" "),e("li",[e("p",[a._v("按函数调查内存分配 打开面板")])])]),a._v(" "),e("h4",{attrs:{id:"避免内存泄露的注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免内存泄露的注意事项","aria-hidden":"true"}},[a._v("#")]),a._v(" 避免内存泄露的注意事项")]),a._v(" "),e("ul",[e("li",[a._v("少用全局变量，避免意外产生全局变量")]),a._v(" "),e("li",[a._v("使用闭包要及时注意，有Dom元素的引用要及时清理。")]),a._v(" "),e("li",[a._v("计时器里的回调没用的时候要记得销毁。")]),a._v(" "),e("li",[a._v("为了避免疏忽导致的遗忘，我们可以使用 WeakSet 和 WeakMap结构，它们对于值的引用都是不计入垃圾回收机制的，表示这是弱引用")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  const wm = new WeakMap();\n\n  const element = document.getElementById('example');\n\n  wm.set(element, 'some information');\n  wm.get(element) // \"some information\"\n  \n  //dom 元素删除则对应的键值对会消失\n")])])]),e("h3",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章","aria-hidden":"true"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),e("p",[a._v("前端Q 《chrome 内存分析》")])])}],!1,null,null,null);v.options.__file="gc.md";t.default=v.exports}}]);