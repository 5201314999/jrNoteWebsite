(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{155:function(a,r,t){"use strict";t.r(r);var e=t(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"数组的基本api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的基本api","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组的基本api")]),a._v(" "),t("h2",{attrs:{id:"写在前面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在前面","aria-hidden":"true"}},[a._v("#")]),a._v(" 写在前面")]),a._v(" "),t("p",[a._v("写代码这么久以来一直发现自己总有些基础知识记不住，老了老了，记性不行就只能靠笔记了。本篇主要想记录自己经常性记不清的一些语法")]),a._v(" "),t("h2",{attrs:{id:"正文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正文","aria-hidden":"true"}},[a._v("#")]),a._v(" 正文")]),a._v(" "),t("h3",{attrs:{id:"_1-sort-includes-flat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sort-includes-flat","aria-hidden":"true"}},[a._v("#")]),a._v(" 1 sort includes flat")]),a._v(" "),t("ul",[t("li",[a._v("如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；")]),a._v(" "),t("li",[a._v("如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；")]),a._v(" "),t("li",[a._v("如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\ncompareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  this.regionRenderData.sort((aObj,bObj)=>{\n                    if(aObj[value+'Count']<bObj[value+'Count']){\n                        return 1;\n                    }\n                    else if(aObj[value+'Count']===bObj[value+'Count']){\n                        return 0;\n                    }\n                    else{\n                        return -1;\n                    }\n                });\n\n     //只是比较简单值的话，简写方法\n     this.regionRenderData.sort((aObj,bObj)=>{\n                    return aObj[value+'Count']-bObj[value+'Count']\n                });\n")])])]),t("h3",{attrs:{id:"_2-伪数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-伪数组","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 伪数组")]),a._v(" "),t("p",[a._v("伪数组对象（拥有一个 length 属性和若干索引属性的任意对象）")]),a._v(" "),t("p",[a._v("可迭代对象（可以获取对象中的元素,如 Map和 Set 等）")]),a._v(" "),t("p",[a._v("Array.from() 可以将伪数组转成真数组。")]),a._v(" "),t("p",[t("strong",[a._v("备注:")]),a._v(" 也可以使用扩展运算符 [...arr]")]),a._v(" "),t("h3",{attrs:{id:"_3-怎么判断是一个是数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-怎么判断是一个是数组","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 怎么判断是一个是数组")]),a._v(" "),t("pre",[t("code",[a._v(" Array.isArray(arr)\n Object.prototype.toString.call(arr)==='[object Array]'\n arr instanceof Array\n")])]),a._v(" "),t("h3",{attrs:{id:"_4-数组扁平化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组扁平化","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 数组扁平化")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  function flatten(arr){\n            while(arr.some(item=>Array.isArray(item))){\n                console.log(...arr)\n                arr=[].concat(...arr)    //[].concat(1,2,[3,4])  [1,2,3,4]\n            }\n            return arr\n        }       \n")])])])])}],!1,null,null,null);n.options.__file="4Array.md";r.default=n.exports}}]);